---
- hosts: all
  become: yes
  gather_facts: false
  tasks:
    # Fail if groups variable is not defined
    - name: Ensure groups variable is defined
      ansible.builtin.fail:
        msg: "The variable 'groups' is not defined or is empty."
      when: groups is not defined or groups | length == 0

    # Determine if cleanup mode is enabled
    - name: Check if cleanup is enabled
      ansible.builtin.set_fact:
        cleanup_mode: "{{ cleanup_mode | default(false) }}"

    # Get existing users and groups
    - name: Gather existing users and groups
      ansible.builtin.shell: |
        getent passwd | cut -d: -f1
        echo "---"
        getent group | cut -d: -f1
      register: users_and_groups

    - name: Set facts for existing users and groups
      ansible.builtin.set_fact:
        existing_users: "{{ users_and_groups.stdout.split('---')[0].split() if '---' in users_and_groups.stdout else [] }}"
        existing_groups: "{{ users_and_groups.stdout.split('---')[1].split() if '---' in users_and_groups.stdout else [] }}"

    # Cleanup mode: Remove users specified in configuration
    - name: Remove specified users in cleanup mode
      ansible.builtin.user:
        name: "{{ item }}"
        state: absent
        remove: yes  # Remove home directories as well
      loop: "{{ groups | map(attribute='users') | flatten | list }}"
      when: cleanup_mode
      register: user_removal

    # Cleanup mode: Remove groups specified in configuration
    - name: Remove specified groups in cleanup mode
      ansible.builtin.group:
        name: "{{ item.name }}"
        state: absent
      loop: "{{ groups }}"
      when: cleanup_mode
      register: group_removal

    # Cleanup mode: Remove all sudo privilege files for specified groups
    - name: Remove all sudo privilege files in cleanup mode
      ansible.builtin.file:
        path: "/etc/sudoers.d/{{ item.name }}"
        state: absent
      loop: "{{ groups }}"
      when: cleanup_mode

    # Ensure groups exist when cleanup is not enabled
    - name: Ensure groups exist
      ansible.builtin.group:
        name: "{{ item.name }}"
        state: present
      loop: "{{ groups }}"
      when: not cleanup_mode

    # Ensure users exist in their respective groups when cleanup is not enabled
    - name: Ensure users exist in their respective groups
      ansible.builtin.user:
        name: "{{ item.1 }}"
        groups: "{{ item.0.name }}"
        shell: /bin/bash
        append: yes
        state: present
        create_home: true
        home: "/home/{{ item.1 }}"
      loop: "{{ groups | subelements('users') }}"
      when: not cleanup_mode

    # Ensure home directory permissions are set when cleanup is not enabled
    - name: Ensure home directories have correct permissions
      ansible.builtin.file:
        path: "/home/{{ item.1 }}"
        state: directory
        mode: '0750'
        owner: "{{ item.1 }}"
        group: "{{ item.0.name }}"
      loop: "{{ groups | subelements('users') }}"
      when: not cleanup_mode

    # Set sudo privileges for groups only when cleanup is not enabled
    - name: Set sudo privileges for groups
      ansible.builtin.copy:
        dest: "/etc/sudoers.d/{{ item.name }}"
        content: |
          %{{ item.name }} {{ item.privileges }}
        mode: '0440'
      loop: "{{ groups }}"
      when: not cleanup_mode and item.privileges is defined
